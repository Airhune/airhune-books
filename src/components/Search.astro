---
let searchTerm = '';
let searchResults = [];

const handleSearch = async () => {
  if (searchTerm.trim()) {
    const search_response = await fetch(`https://www.googleapis.com/books/v1/volumes/${encodeURIComponent(searchTerm)}&maxResults=10`);
    const searchResults = await search_response.json();
  } else {
    searchResults = [];
  }
};
---

<div class="container mx-auto p-4">
    <h2 class="text-2xl font-bold mb-4">Buscar libros</h2>
    <form on:submit|preventDefault={handleSearch} class="mb-4">
      <input
        type="text"
        bind:value={searchTerm}
        placeholder="Escribe un título, autor o tema..."
        class="border p-2 rounded w-full md:w-1/2"
      />
      <button type="submit" class="ml-2 bg-blue-500 text-white p-2 rounded">Buscar</button>
    </form>

    {searchResults.length > 0 ? (
      <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {searchResults.map((book) => (
          <li class="border p-4 rounded shadow">
            <a href={`/book/${book.id}`} class="text-blue-500">
              {book.volumeInfo.title}
            </a>
            <p class="text-gray-600">
              {book.volumeInfo.authors?.join(', ') || 'Autor no disponible'}
            </p>
            <img
              src={book.volumeInfo.imageLinks?.thumbnail}
              alt={book.volumeInfo.title}
              class="w-20 h-20 object-cover mt-2"
            />
          </li>
        ))}
      </ul>
    ) : searchTerm.trim() ? (
      <p class="text-gray-500">No se encontraron resultados.</p>
    ) : null}
  </div>

  <script>
    // Client-side hydration para manejar la búsqueda en tiempo real (opcional)
    import { hydrate } from 'astro/runtime/server';

    hydrate(() => {
      const input = document.querySelector('input');
      input.addEventListener('input', async () => {
        searchTerm = input.value;
        await handleSearch();
      });
    });
  </script>

